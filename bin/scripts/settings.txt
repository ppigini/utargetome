
import os

directory = os.getcwd()
position = os.environ.get("U1_SITE")
value = os.environ.get("U1_VALUE")
print_option = os.environ.get("U1_PRINT")

if value == 'complementary':
	value_full = '11'
	value_BS1 = 'n'
	value_BS2 = 'n'
	value_BA1 = 'n'
	value_BA2 = 'n'
	value_ALS = 'n'
	value_ALA = 'n'
elif value == '11':
	value_full = '11'
	value_BS1 = '11'
	value_BS2 = '11'
	value_BA1 = 'n'
	value_BA2 = 'n'
	value_ALS = 'n'
	value_ALA = 'n'
elif value == '10':
	value_full = '10'
	value_BS1 = '10'
	value_BS2 = '10'
	value_BA1 = '10'
	value_BA2 = 'n'
	value_ALS = '10'
	value_ALA = 'n'
else:
	value_full = value
	value_BS1 = value
	value_BS2 = value
	value_BA1 = value
	value_BA2 = value
	value_ALS = value
	value_ALA = value

if position == 'all':
	position_exons = 'y'
	position_introns = 'y'
	position_5SSs = 'y'
	position_3SSs = 'y'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == 'exons':
	position_exons = 'y'
	position_introns = 'n'
	position_5SSs = 'n'
	position_3SSs = 'n'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == 'introns':
	position_exons = 'n'
	position_introns = 'y'
	position_5SSs = 'n'
	position_3SSs = 'n'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == 'splice_overlapping':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'y'
	position_3SSs = 'y'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == 'splice_range':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'y'
	position_3SSs = 'y'
	position_5SSs_type = 'range'
	position_3SSs_type = 'range'
elif position == '5SSs_overlapping':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'y'
	position_3SSs = 'n'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == '5SSs_range':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'y'
	position_3SSs = 'n'
	position_5SSs_type = 'range'
	position_3SSs_type = 'range'
elif position == '3SSs_overlapping':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'n'
	position_3SSs = 'y'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == '3SSs_range':
	position_exons = 'n'
	position_introns = 'n'
	position_5SSs = 'n'
	position_3SSs = 'y'
	position_5SSs_type = 'range'
	position_3SSs_type = 'range'
elif position == 'no_5SSs':
	position_exons = 'y'
	position_introns = 'y'
	position_5SSs = 'n'
	position_3SSs = 'y'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'
elif position == 'exons_3SSs':
	position_exons = 'y'
	position_introns = 'n'
	position_5SSs = 'n'
	position_3SSs = 'y'
	position_5SSs_type = 'overlapping'
	position_3SSs_type = 'overlapping'

if print_option == 'no':
	print_option_exons = 'n'
	print_option_introns = 'n'
	print_option_5SSs = 'n'
	print_option_3SSs = 'n'
elif print_option == 'exons':
	print_option_exons = 'y'
	print_option_introns = 'n'
	print_option_5SSs = 'n'
	print_option_3SSs = 'n'
elif print_option == 'introns':
	print_option_exons = 'n'
	print_option_introns = 'y'
	print_option_5SSs = 'n'
	print_option_3SSs = 'n'
elif print_option == '5SSs':
	print_option_exons = 'n'
	print_option_introns = 'n'
	print_option_5SSs = 'y'
	print_option_3SSs = 'n'
elif print_option == '3SSs':
	print_option_exons = 'n'
	print_option_introns = 'n'
	print_option_5SSs = 'n'
	print_option_3SSs = 'y'
elif print_option == 'exons_3SSs':
	print_option_exons = 'y'
	print_option_introns = 'n'
	print_option_5SSs = 'n'
	print_option_3SSs = 'y'

with open(''.join([directory, '/input/settings.txt']), 'w') as output:
	output.write('database: ')
	output.write('\n')
	output.write('	exons: ')
	output.write(position_exons)
	output.write('\n')
	output.write('	introns: ')
	output.write(position_introns)
	output.write('\n')
	output.write('	5SSs: ')
	output.write(position_5SSs)
	output.write('\n')
	output.write('	3SSs: ')
	output.write(position_3SSs)
	output.write('\n')
	output.write('registers: ')
	output.write('\n')
	output.write('	full: ')
	output.write(value_full)
	output.write('\n')
	output.write('	BS1: ')
	output.write(value_BS1)
	output.write('\n')
	output.write('	BS2: ')
	output.write(value_BS2)
	output.write('\n')
	output.write('	BA1: ')
	output.write(value_BA1)
	output.write('\n')
	output.write('	BA2: ')
	output.write(value_BA2)
	output.write('\n')
	output.write('	ALS: ')
	output.write(value_ALS)
	output.write('\n')
	output.write('	ALA: ')
	output.write(value_ALA)
	output.write('\n')
	output.write('positions: ')
	output.write('\n')
	output.write('	5SSs: ')
	output.write(position_5SSs_type)
	output.write('\n')
	output.write('	3SSs: ')
	output.write(position_3SSs_type)
	output.write('\n')
	output.write('print: ')
	output.write('\n')
	output.write('	exons: ')
	output.write(print_option_exons)
	output.write('\n')
	output.write('	introns: ')
	output.write(print_option_introns)
	output.write('\n')
	output.write('	5SSs: ')
	output.write(print_option_5SSs)
	output.write('\n')
	output.write('	3SSs: ')
	output.write(print_option_3SSs)
	output.write('\n')
	output.write('partitions: ')
	output.write('\n')
	output.write('	number: 1')
